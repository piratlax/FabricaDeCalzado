package administracion;
import Logica.conexion;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;





public class GestionPersonal extends javax.swing.JFrame {
    // Se instancia una conexion de la clase conecta
    conexion con=new conexion();
    // se asigna la conexion a la base de datos con la variable cn
    Connection cn=con.conectar();
    // Se creal el modelo para la tabla
    
    DefaultTableModel modelo;
    
    
    public GestionPersonal() {
        initComponents();
        // esta instruccion centra la ventana en el monitor
        this.setLocationRelativeTo(null);
        // se manda llamar al metodo de llenado de tabla
        tabla();
        // se manda a llamar el metodo nuevo que hace ciertos campos de textos editables
        camposInicio();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JTnombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        JTusuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JCcategoria = new javax.swing.JComboBox();
        btSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btNuevo = new javax.swing.JButton();
        btEditar = new javax.swing.JButton();
        btBorrar = new javax.swing.JButton();
        jbAgregar = new javax.swing.JButton();
        btModificar = new javax.swing.JButton();
        JTclave = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Alta de Personal");

        jLabel2.setText("Nombre");

        jLabel3.setText("Usuario");

        jLabel4.setText("Clave");

        jLabel6.setText("Categoria");

        JCcategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Administrador", "Inventarios", "Calzado", "Produccion" }));
        JCcategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCcategoriaActionPerformed(evt);
            }
        });

        btSalir.setText("Salir");
        btSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalirActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Usuario", "Clave", "Categoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(100);
            tabla.getColumnModel().getColumn(3).setResizable(false);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));

        btNuevo.setText("Nuevo");
        btNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNuevoActionPerformed(evt);
            }
        });

        btEditar.setText("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        btBorrar.setText("Borrar");
        btBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBorrarActionPerformed(evt);
            }
        });

        jbAgregar.setText("Agregar");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });

        btModificar.setText("Modificar");
        btModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(btNuevo)
                .addGap(18, 18, 18)
                .addComponent(jbAgregar)
                .addGap(18, 18, 18)
                .addComponent(btEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btModificar)
                .addGap(8, 8, 8)
                .addComponent(btBorrar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btSalir)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(JCcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(JTusuario)
                                            .addComponent(JTnombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(JTclave, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(JTnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(JTusuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(JTclave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(JCcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(btSalir)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalirActionPerformed
        try {
            // Salir del menu de alta
            Administracion frm = new Administracion();
            frm.setVisible(true);
            cn.close();
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(GestionPersonal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
        
        
        
    }//GEN-LAST:event_btSalirActionPerformed

    private void btBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBorrarActionPerformed
       //boton de borrado
        int fila = tabla.getSelectedRow();
        String idUsuario;
       if (fila>=0){
           idUsuario=tabla.getValueAt(fila, 1).toString();
           
          if (idUsuario.equals("admin")){
             JOptionPane.showMessageDialog(null,"No se debe eliminar al Administrador"); 
          } else{
               
        try{
            String sql="DELETE FROM usuario WHERE usuario='"+idUsuario+"'";
            Statement st;
            st=cn.createStatement();
            st.executeUpdate(sql);
            JOptionPane.showMessageDialog(null,"Elemento Eliminado");
            tabla();
            st.close();
            cn.commit();
        }
        catch (Exception ex){
          JOptionPane.showMessageDialog(null,"no se elimino el elemento");
        }
       }
       }
    }//GEN-LAST:event_btBorrarActionPerformed

    private void btNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNuevoActionPerformed
        //Agregar nuevo campo
        camposNuevo();
        
        
    }//GEN-LAST:event_btNuevoActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
       //Agregar nuevo usuario
        int contador=0; //se asigna un contador en caso de un registro repetido
        
       
       if (JTnombre.getText().equals("") || JTclave.getText().equals("")){
            JOptionPane.showMessageDialog(null,"faltan Datos por escribir");
       }else{
            try {
                // revisamos si no hay un nombre o un usario ya en la bd con los mismos datos
                String sql="SELECT * FROM usuario WHERE (nombre='"+JTnombre.getText()+
                        "') and (usuario='"+JTusuario.getText()+"')";
                Statement st;
                st = cn.createStatement();
                ResultSet rs=st.executeQuery(sql);
               
                while (rs.next()){
                    JOptionPane.showMessageDialog(null,"El registro esta repetido en la base de datos");
                    contador++;
                    
                }
                st.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(GestionPersonal.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (contador==0){
               try {
            //se prepara a insertarlo en la tabla de usuarios   
            Statement insertar=cn.createStatement();
            String sql="INSERT INTO usuario (nombre,usuario,clave,categoria) VALUES ('"+
                    JTnombre.getText()+"','"+
                    JTusuario.getText()+"','"+
                    JTclave.getText()+"','"+
                    JCcategoria.getSelectedItem().toString()+"')";
            insertar.executeUpdate(sql);
            insertar.close();
            cn.commit();
            
            
            JOptionPane.showMessageDialog(null,"se agregado al nuevo usuario");
            tabla();
            camposInicio();
            btNuevo.setEnabled(true);
            btBorrar.setEnabled(true);
            limpiar();
            
                       } catch (SQLException ex) {
            Logger.getLogger(GestionPersonal.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
       }
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        //Editar
        // Se modifica un dato de la tabla
        //primero limpio los campos
        limpiar();
        // agrego 3 variables tipo cadena que llenaran los campos a cambiar
        String nuevoNombre; 
        String nuevoUsuario;
        String nuevaClave;
        String nuevaCategoria;

        //ahora agrego los datos seleccionados de la tabla
        int fila = tabla.getSelectedRow();
        
       if (fila>=0){
           nuevoNombre=tabla.getValueAt(fila, 0).toString();
           JTnombre.setText(nuevoNombre);
           nuevoUsuario=tabla.getValueAt(fila, 1).toString();
           JTusuario.setText(nuevoUsuario);
           nuevaClave=tabla.getValueAt(fila, 2).toString();
           JTclave.setText(nuevaClave);
           nuevaCategoria=tabla.getValueAt(fila, 3).toString();
           JCcategoria.setSelectedItem(nuevaCategoria);
       }
       //aqui reviso que si se pasaron datos a la clave y activo el boton editar;
       if (JTnombre.getText().equals("")){
           JOptionPane.showMessageDialog(null,"Selecciona un campo de la Tabla");
       }else{
           btEditar.setEnabled(false);
           btModificar.setEnabled(true);
           JTnombre.setEnabled(true);
           JTclave.setEnabled(true);
           
           //verificamos que el Usuario a modificar no sea el Administrador
           if (JCcategoria.getSelectedItem().toString().equals("Administrador")){
               JCcategoria.setEnabled(false);
           }else {
           JCcategoria.setEnabled(true);
           }
           btNuevo.setEnabled(false);
           btBorrar.setEnabled(false);
       }
       
        
    }//GEN-LAST:event_btEditarActionPerformed

    private void btModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModificarActionPerformed
     //Boton de modificar campos
       
        
       
       if (JTnombre.getText().equals("") || JTclave.getText().equals("")){
            JOptionPane.showMessageDialog(null,"faltan Datos por escribir");
       } try {
                
                   //Se le asigna una cadena al valor de Categoria
                   
            String nuevaCategoria=JCcategoria.getSelectedItem().toString();
                //se prepara a insertarlo en la tabla de usuarios   
            
            Statement modificar=cn.createStatement();
            String sql="UPDATE usuario SET usuario='"+JTusuario.getText()+"',nombre='"+JTnombre.getText()+"',"+
                    "clave='"+JTclave.getText()+"',categoria='"+nuevaCategoria+"' WHERE usuario='"+JTusuario.getText()+"'";
            modificar.executeUpdate(sql);
            modificar.close();
            cn.commit();
            
            JOptionPane.showMessageDialog(null,"se ha modificado el Usuario "+JTusuario.getText());
            tabla();
            btNuevo.setEnabled(true);
            btBorrar.setEnabled(true);
            btEditar.setEnabled(true);
            btModificar.setEnabled(false);
            JTnombre.setEnabled(false);
            JTclave.setEnabled(false);
            
            limpiar();
            JCcategoria.setEnabled(false);
                       } catch (SQLException ex) {
            Logger.getLogger(GestionPersonal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_btModificarActionPerformed

    private void JCcategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCcategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCcategoriaActionPerformed
    
    void camposInicio(){
        JTnombre.setEnabled(false);
        JTusuario.setEnabled(false);
        JTclave.setEnabled(false);
        JCcategoria.setEnabled(false);
        jbAgregar.setEnabled(false);
        btModificar.setEnabled(false);
        btEditar.setEnabled(true);
        btBorrar.setEnabled(true);
    }
    
    void camposNuevo(){
         JTnombre.setEnabled(true);
        JTusuario.setEnabled(true);
        JTclave.setEnabled(true);
        JCcategoria.setEnabled(true);
        jbAgregar.setEnabled(true);
        btNuevo.setEnabled(false);
        btEditar.setEnabled(false);
        btBorrar.setEnabled(false);
    }
    
    void limpiar(){
        JTnombre.setText("");
        JTusuario.setText("");
        JTclave.setText("");
    }
    void tabla(){
     // desde aqui mandamos a llamar a todos los usuarios y los listamos en la tabla
     // se crea una matriz para almacenar los datos
        
        String[] cabecera={"Nombre","Usuario","Clave","Categoria"};
        // se definen los registros que llevara la tabla
        String[] registros=new String[4];
        // se hace el llamado sql de todos los usuarios
        String sql="SELECT * FROM usuario";
        modelo= new DefaultTableModel(null,cabecera);
        
        try {
       
       Statement table;
       table = cn.createStatement();
       ResultSet rs=table.executeQuery(sql);
       while (rs.next()){
           registros[0]=rs.getString("nombre");
           registros[1]=rs.getString("usuario");
           registros[2]=rs.getString("clave");
           registros[3]=rs.getString("categoria");
           
           
           modelo.addRow(registros);
           
       }
       tabla.setModel(modelo);
       
            
       
       
                
        
    
       }
       catch (SQLException ex){
           System.out.println ("Sin poder ejecutar el query a la tabla");
       }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionPersonal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionPersonal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionPersonal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionPersonal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionPersonal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JCcategoria;
    private javax.swing.JTextField JTclave;
    private javax.swing.JTextField JTnombre;
    private javax.swing.JTextField JTusuario;
    private javax.swing.JButton btBorrar;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btModificar;
    private javax.swing.JButton btNuevo;
    private javax.swing.JButton btSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
